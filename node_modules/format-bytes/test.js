const formatBytes = require('.');

let ran = 0;

function testIO(input, output, message) {
  ran++;

  const actual = formatBytes(input);

  if (actual !== output) {
    console.error(
      `Assertion failed: "${input}" produced "${actual}", expected "${output}"`
    );
    process.exit(1);
  }
}

// Should have units for all following magnitudes
testIO(2, '2 bytes');
testIO(12, '12 bytes');
testIO(123, '123 bytes');
testIO(1234, '1.23 KB');
testIO(12345, '12.3 KB');
testIO(123456, '123 KB');
testIO(1234567, '1.23 MB');
testIO(12345678, '12.3 MB');
testIO(123456789, '123 MB');
testIO(1234567890, '1.23 GB');
testIO(12345678901, '12.3 GB');
testIO(123456789012, '123 GB');
testIO(1234567890123, '1.23 TB');
testIO(12345678901234, '12.3 TB');
testIO(123456789012345, '123 TB');
testIO(1234567890123456, '1.23 PB');
testIO(12345678901234567, '12.3 PB');
testIO(123456789012345678, '123 PB');
testIO(1234567890123456789, '1.23 EB');
testIO(12345678901234567890, '12.3 EB');
testIO(123456789012345678901, '123 EB');
testIO(1234567890123456789012, '1.23 ZB');
testIO(12345678901234567890123, '12.3 ZB');
testIO(123456789012345678901234, '123 ZB');
testIO(1234567890123456789012345, '1.23 YB');
testIO(12345678901234567890123456, '12.3 YB');
testIO(123456789012345678901234567, '123 YB');

// 0 and 1 require special handling
testIO(0, '0 bytes');
testIO(1, '1 byte');

// Very large numbers fall back to scientific notation
testIO(1234567890123456789012345678, '1.23 Ã— 10^27 bytes');

// Rounding may result in unit change
testIO(999.5 * 1000, '1.00 MB');

console.log(`Passed all ${ran} tests.`);